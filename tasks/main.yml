---
- name: Add required dependencies.
  apt:
    name:
      - apt-transport-https
      - gnupg2
    state: present
- name: Detection Docker
  stat:
    path: /.dockerenv
  register: docker_env

- name: Add Elasticsearch apt key.
  apt_key:
    url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
    state: present
  when:
    - config_system

- name: Add Elasticsearch repository.
  apt_repository:
    repo: 'deb https://artifacts.elastic.co/packages/{{ elasticsearch_version }}/apt stable main'
    state: present
    update_cache: true
  when:
    - config_system

- name: Install Elasticsearch.
  package:
    name: "{{ elasticsearch_package }}"
    state: "{{ elasticsearch_package_state }}"
  notify: restart elasticsearch

- name: Configure Elasticsearch 7+.
  template:
    src: "{{ item | basename }}.j2"
    dest: "{{ item }}"
    owner: root
    group: elasticsearch
    mode: 0660
  with_items:
    - /etc/elasticsearch/elasticsearch.yml
    - /etc/elasticsearch/jvm.options.d/heap.options
  notify: restart elasticsearch
  when: elasticsearch_version[0] | int >= 7

- name: Clean des nodes en docker
  file:
    path: '{{ item }}'
    state: absent
  loop:
    - "/var/lib/elasticsearch/nodes/0/node.lock"
    - "/var/lib/elasticsearch/nodes/0/snapshot_cache/write.lock"
    - "/etc/elasticsearch/elasticsearch.keystore"
  when: docker_env.stat.exists == True

- name: Regenerate keystore en docker
  shell: /usr/share/elasticsearch/bin/elasticsearch-keystore create
  when: docker_env.stat.exists == True

- name: Generation du fichier systemV en docker
  copy:
    src: "../templates/elasticsearch"
    dest: "/etc/init.d/elasticsearch"
    owner: root
    group: root
    mode: 0750
  when: docker_env.stat.exists == True

- name: Force a restart if configuration has changed.
  meta: flush_handlers

- name: Start Elasticsearch.
  service:
    name: elasticsearch
    state: "{{ elasticsearch_service_state }}"
    enabled: "{{ elasticsearch_service_enabled }}"

- name: Make sure Elasticsearch is running before proceeding.
  wait_for:
    host: "{{ elasticsearch_network_host }}"
    port: "{{ elasticsearch_http_port }}"
    delay: 3
    timeout: 300
